package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"never-price-match-server/internal/graph/model"
)

// SearchProduct is the resolver for the searchProduct field.
// It calls the service layer and maps the results to the GraphQL model.
func (r *queryResolver) SearchProduct(ctx context.Context, name string, category string) ([]*model.Product, error) {
	// 1. Call the service, which returns a list of results from all platforms
	// (either from cache or a live scrape).
	scrapeResults, err := r.ProductService.SearchAndScrape(name, category)
	if err != nil {
		return nil, err
	}

	// 2. Prepare a flat list to hold all individual products for the GraphQL response.
	var finalProductList []*model.Product

	// 3. Iterate through the results from each platform.
	for _, platformResult := range scrapeResults {
		// 4. For each platform, iterate through the products found there.
		for _, product := range platformResult.Products {
			// 5. Create a GraphQL model object.
			finalProductList = append(finalProductList, &model.Product{
				Platform:    platformResult.Platform,
				ProductName: product.Name,
				Price:       product.Price,
				ImageURL:    product.ImageURL,
				Link:        product.Link,
			})
		}
	}

	return finalProductList, nil
}

// ProductSuggestions is the resolver for the productSuggestions field.
func (r *queryResolver) ProductSuggestions(ctx context.Context, name string) ([]string, error) {
	return r.ProductService.GetProductSuggestions(name)
}
