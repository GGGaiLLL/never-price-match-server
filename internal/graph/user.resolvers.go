package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"fmt"
	"never-price-match-server/internal/auth"
	"never-price-match-server/internal/graph/generated"
	"never-price-match-server/internal/graph/model"
	"never-price-match-server/internal/httpctx"
	"never-price-match-server/internal/infra/logger"
	"time"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUserInput) (*model.User, error) {
	u, err := r.UserService.Create(input.Name, input.Email, input.Password)
	if err != nil {
		return nil, err
	}
	return &model.User{ID: u.ID, Name: u.Name, Email: u.Email}, nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.LoginInput) (*model.AuthPayload, error) {
	u, err := r.UserService.Login(input.Email, input.Password)
	if err != nil {
		return &model.AuthPayload{Ok: false, User: nil}, err
	}

	token, err := auth.Sign(u.ID, 7*24*time.Hour)
	if err != nil {
		logger.L.Error("sign token failed", logger.Err(err))
		return nil, err
	}

	if gc := httpctx.Gin(ctx); gc != nil {
		gc.SetCookie("sid", token, int((7 * 24 * time.Hour).Seconds()), "/", "", false, true) // HttpOnly
		// SameSite
		gc.Writer.Header().Add("Set-Cookie", "sid="+token+"; Path=/; HttpOnly; SameSite=Lax")
	}
	return &model.AuthPayload{Ok: true, User: &model.User{ID: u.ID, Name: u.Name, Email: u.Email, CreatedAt: u.CreatedAt, UpdatedAt: u.UpdatedAt}}, nil
}

// Logout is the resolver for the logout field.
func (r *mutationResolver) Logout(ctx context.Context) (bool, error) {
	if gc := httpctx.Gin(ctx); gc != nil {
		gc.SetCookie("sid", "", -1, "/", "", false, true)
		gc.Writer.Header().Add("Set-Cookie", "sid=; Path=/; Max-Age=0; HttpOnly; SameSite=Lax")
	}
	return true, nil
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*model.User, error) {
	gc := httpctx.Gin(ctx)
	v, _ := gc.Get("uid")
	uid, _ := v.(string)
	u, err := r.UserService.Get(uid)
	if err != nil || u == nil {
		return nil, err
	}
	return &model.User{ID: u.ID, Name: u.Name, Email: u.Email, CreatedAt: u.CreatedAt, UpdatedAt: u.UpdatedAt}, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	u, err := r.UserService.Get(id)
	if err != nil {
		return nil, err
	}
	return &model.User{ID: u.ID, Name: u.Name, Email: u.Email, CreatedAt: u.CreatedAt, UpdatedAt: u.UpdatedAt}, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// CheckEmailExist is the resolver for the checkEmailExist field.
func (r *queryResolver) CheckEmailExist(ctx context.Context, email string) (bool, error) {
	return r.UserService.CheckEmailExist(email)
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
