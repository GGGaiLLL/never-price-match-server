package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"never-price-match-server/internal/graph/generated"
	"never-price-match-server/internal/graph/model"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUserInput) (*model.User, error) {
	u, err := r.UserService.Create(input.Name, input.Email, input.Password)
	if err != nil {
		return nil, err
	}
	return &model.User{ID: u.ID, Name: u.Name, Email: u.Email}, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	u, err := r.UserService.Get(id)
	if err != nil {
		return nil, err
	}
	return &model.User{ID: u.ID, Name: u.Name, Email: u.Email}, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
